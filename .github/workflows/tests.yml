name: Dlang tests

on: [push, pull_request]

jobs:
  main:
    strategy:
      fail-fast: false

      matrix:
        platform: [ linux64, win64, win32 ]
        dc: [ dmd-latest, ldc-latest, ldc-1.38.0, ldc-1.37.0, ldc-1.35.0, ldc-1.30.0, ldc-1.25.0, ldc-1.20.0, ldc-1.15.0, ldc-1.25.0, ldc-1.10.0 ]

        include:
          - platform: linux64
            os: ubuntu-22.04
            model: 64
            cxx: g++

          - platform: win64
            os: windows-2022
            model: 64
            cxx: cl
            vc_arch: x64

          - platform: win32
            os: windows-2022
            model: 32mscoff
            cxx: cl
            vc_arch: x86

    runs-on: ${{ matrix.os }}
    container: ${{ matrix.container }}

    steps:
      - uses: actions/checkout@v4

      - name: Install Debian packages
        if: ${{ matrix.platform == 'debian32' }}
        run: |
          dpkg --add-architecture i386
          echo "deb http://deb.debian.org/debian bullseye-backports main contrib non-free" >> /etc/apt/sources.list
          echo "deb-src http://deb.debian.org/debian bullseye-backports main contrib non-free" >> /etc/apt/sources.list
          apt-get -qq update
          apt-get -qq install -y gpg xz-utils 7zip sudo
          apt-get -qq install -y libc6-dev:i386 libstdc++6:i386 g++:i386

      - name: Install D compiler
        uses: dlang-community/setup-dlang@v2
        with:
          compiler: ${{ matrix.dc }}

      - name: Change env vars to 32-bit
        if: ${{ matrix.platform == 'debian32' }}
        run: |
          echo "LD_LIBRARY_PATH=$(echo "$LD_LIBRARY_PATH" | sed "s|dmd2/linux/lib64|dmd2/linux/lib32|g")" >> "$GITHUB_ENV"
          echo "DC=$(echo "$DC" | sed "s|dmd2/linux/bin64|dmd2/linux/bin32|g")" >> "$GITHUB_ENV"
          echo "$(echo "$PATH" | grep -o "[^:]*dmd2/linux/bin[^:]*" | sed "s|dmd2/linux/bin64|dmd2/linux/bin32|g")" >> "$GITHUB_PATH"

      - name: Install Android LDC libraries
        if: ${{ matrix.ldc_android_arch != '' }}
        run: |
          LDC_PATH=/opt/hostedtoolcache/ldc2/1.38.0/x64/ldc2-1.38.0-linux-x86_64
          wget https://github.com/ldc-developers/ldc/releases/download/v1.38.0/ldc2-1.38.0-android-${{ matrix.ldc_android_arch }}.tar.xz
          tar xf ldc2-1.38.0-android-${{ matrix.ldc_android_arch }}.tar.xz
          mv ldc2-1.38.0-android-${{ matrix.ldc_android_arch }}/lib $LDC_PATH/lib-android_${{ matrix.ldc_android_arch }}
          echo "\"${{ matrix.ldc_android_arch }}-.*-linux-android\":" >> $LDC_PATH/etc/ldc2.conf
          echo "{" >> $LDC_PATH/etc/ldc2.conf
          echo "    switches = [" >> $LDC_PATH/etc/ldc2.conf
          echo "        \"-defaultlib=phobos2-ldc,druntime-ldc\"," >> $LDC_PATH/etc/ldc2.conf
          echo "        \"-gcc=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/${{ matrix.ndk_clang }}\"," >> $LDC_PATH/etc/ldc2.conf
          echo "    ];" >> $LDC_PATH/etc/ldc2.conf
          echo "    lib-dirs = [" >> $LDC_PATH/etc/ldc2.conf
          echo "        \"%%ldcbinarypath%%/../lib-android_${{ matrix.ldc_android_arch }}\"," >> $LDC_PATH/etc/ldc2.conf
          echo "    ];" >> $LDC_PATH/etc/ldc2.conf
          echo "};" >> $LDC_PATH/etc/ldc2.conf

      #- name: Update PATH
      #  if: ${{ matrix.os == 'windows-2022' }}
      #  run: |
      #    echo "C:\msys64\usr\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: '[Windows] Add VC toolset to PATH'
        if: runner.os == 'Windows'
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: ${{ matrix.vc_arch }}

      - name: Print env
        run: |
          env

      - name: 'Build & Test'
        timeout-minutes: 5
        run: |
          ${{ env.DC }} -run runtests.d --github --compiler=${{ env.DC }} --cxx=${{ matrix.cxx }} -m${{ matrix.model }} -v
